import torch
import torch.nn as nn
from complexLayers import ComplexConv2d, ComplexLinear
from complexModules import InvariantReLU, invmaxpool2d, _weights_init


class ProcessingUnit(nn.Module):
    def __init__(self):
        super().__init__()
        '''
        self.conv1 = ComplexConv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False)
        self.relu = InvariantReLU()
        self.conv2 = ComplexConv2d(in_channels=256, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv3 = ComplexConv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv4 = ComplexConv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv5 = ComplexConv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv6 = ComplexConv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv7 = ComplexConv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        #self.apply(_weights_init)
        '''
        self.conv1 = nn.Conv2d(in_channels=256, out_channels=256, kernel_size=3, stride=1, padding=1, bias=False)
        self.relu = nn.ReLU()
        self.maxpool2d = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv3 = nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv4 = nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv5 = nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv6 = nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)
        self.conv7 = nn.Conv2d(in_channels=512, out_channels=512, kernel_size=3, stride=1, padding=1, bias=False)

    def forward(self, xr, xi):
        '''
        xr, xi = self.conv1(xr, xi)
        xr, xi = self.relu(xr, xi)
        xr, xi = invmaxpool2d(xr, xi, 2, 2)
        xr, xi = self.conv2(xr, xi)
        xr, xi = self.relu(xr, xi)
        xr, xi = self.conv3(xr, xi)
        xr, xi = self.relu(xr, xi)
        xr, xi = self.conv4(xr, xi)
        xr, xi = self.relu(xr, xi)
        xr, xi = invmaxpool2d(xr, xi, 2, 2)
        xr, xi = self.conv5(xr, xi)
        xr, xi = self.relu(xr, xi)
        xr, xi = self.conv6(xr, xi)
        xr, xi = self.relu(xr, xi)
        xr, xi = self.conv7(xr, xi)
        xr, xi = self.relu(xr, xi)
        xr, xi = invmaxpool2d(xr, xi, 2, 2)
        xi = self.conv1(xi)
        xi = self.relu(xi)
        xi = self.maxpool2d(xi)
        xi = self.conv2(xi)
        xi = self.relu(xi)
        xi = self.conv3(xi)
        xi = self.relu(xi)
        xi = self.conv4(xi)
        xi = self.relu(xi)
        xi = self.maxpool2d(xi)
        xi = self.conv5(xi)
        xi = self.relu(xi)
        xi = self.conv6(xi)
        xi = self.relu(xi)
        xi = self.conv7(xi)
        xi = self.relu(xi)
        xi = self.maxpool2d(xi)
        '''
        xr = self.conv1(xr)
        xr = self.relu(xr)
        xr = self.maxpool2d(xr)
        xr = self.conv2(xr)
        xr = self.relu(xr)
        xr = self.conv3(xr)
        xr = self.relu(xr)
        xr = self.conv4(xr)
        xr = self.relu(xr)
        xr = self.maxpool2d(xr)
        xr = self.conv5(xr)
        xr = self.relu(xr)
        xr = self.conv6(xr)
        xr = self.relu(xr)
        xr = self.conv7(xr)
        xr = self.relu(xr)
        xr = self.maxpool2d(xr)

        return xr, xr
